{"/":{"title":".mattia(homeüè°)","content":"# Hi, thereüëã. My name is Mattia Ippoliti\n\nHello there, traveller of the web. Welcome back! You must be tired from your journey.\n\nCome, sit! Welcome to my little garden on the internet ‚Äì I‚Äôm Mattia! I spend a lot of time here playing, writing, and building out in the open. It‚Äôs a little unkempt in places, but I think it gives it a little charm.\n\n## Entry Points\n- [Favourite Posts](/notes)\n- [Setup a blog like this!](/notes/setup.md)\n\n---\n\n## Who am I?\nI‚Äôm curious about how we can better incentivize public goods funding, support better interactions with computers and data, and be more responsible stewards of technology.\nIn this era of my life, I‚Äôm working towards being someone who is unabashedly excited and curious about the world.\n\n- \u003ca href=\"https://mattiaippoliti.github.io/MattiaIppoliti/\" target=‚Äú_blank‚Äù\u003eMy personal Web-site\u003c/a\u003e\n\n- \u003ca href=\"https://mattiaippoliti.github.io/article/\" target=‚Äú_blank‚Äù\u003eMy personal Blog\u003c/a\u003e\n\n- \u003ca href=\"https://www.linkedin.com/in/mattiaippoliti/\" target=‚Äú_blank‚Äù\u003eLinkedIn\u003c/a\u003e\n\n- \u003ca href=\"https://github.com/MattiaIppoliti\" target=‚Äú_blank‚Äù\u003eGithub\u003c/a\u003e\n\n- \u003ca href=\"https://linktr.ee/mattiaippoliti\" target=‚Äú_blank‚Äù\u003eLinkTree\u003c/a\u003e\n\n---","lastmodified":"2024-01-08T16:17:25.031362373Z","tags":["Home"]},"/notes/Docker-101":{"title":"Untitled Page","content":"---\ntitle: Docker 101 üêã\ntags: Programming\n---\n# Docker 101 üêã\n\nThis is a small repo which serves as an example/tutorial walking through what Docker is, why people use it, and a few basic examples.\n\n# üëã Introduction\n\n## What is Docker?\n\nDocker is a tool that makes it really easy to package applications into self-sustaining 'containers'.\n\n## What are containers?\n\nContainers, as their name suggests, contain things. In the case of Docker, these contain all the parts the application needs to run, everything from libraries and dependencies to the actual source code.\n\n## Why containers?\n\nContainerization means that everything to do with your application stays inside the container. You shouldn't need to worry about how stuff on your machine (e.g. which version of Python you have) affects how your program runs. As a side benefit, this means that Docker containers are dependency-free. Never worry about \"oh, it works on my machine\" ever again! After a Docker image is created, all of its contents are frozen so it should work exactly the same on your computer as it does for someone else (assuming you both have Docker).\n\n## Why Docker?\n\nDocker makes it super easy to work with these containers and, by proxy, you can get all the cool benefits of containers easily too! It also allows you to programmatically define a container through code, meaning you can collaborate and work on Docker containers just as you would with a regular piece of code through version control like `git`.\n\n# üî® Installing Docker\n\nMore detailed instructions can be found [here](https://docs.docker.com/get-docker/).\n\n# ‚öôÔ∏è Parts of Docker\n\n## Docker Containers\n\nI think the intro covered this pretty well so I'll repeat it again here.\n\n\u003e Containers, as their name suggests, contain things. In the case of Docker, these contain all the parts the application needs to run, everything from libraries and dependencies to the actual source code.\n\nThis means that 'containerized' applications don't need to rely on a system to have certain dependencies (e.g. `Node.js`) installed on the user's system to run because the container will have it packaged.\n\nYou can think of Docker containers like a fully self-contained and running version of your application.\n\n## Docker Image\n\nYou can think of Docker images like a sort of 'template' that describes to Docker how to create a container from scratch. You can build these images by providing instructions on how to build them in the form of layers.\n\n### Layers\n\nDocker images, like ogres (or cakes if you're a boring person), have many layers. The base layer often provides some basic functionality like providing `git`, `bash` or `apt` -- otherwise your container has nothing to run off of! We can then add our own layers on top of that base layer, like installing dependencies, copying files into the image, and defining the command to run when the container starts up. These instructions are programmatically defined through a Dockerfile.\n\n\u003e One of the coolest parts of Docker is that these layers get cached between builds if nothing has changed. That means that if you rebuild an image and only changed the last layer, it'll only need to rebuild the last layer rather than rebuilding the whole image, making for some really fast iteration times.\n\n## Dockerfile\n\nThe Dockerfile are the actual specific instructions for how to create the actual image or 'template'. The Dockerfile starts off by defining a 'base-layer', which serve as the basis for your actual image. Some common base layers are `ubuntu` (which contains a minimal install of the actual Ubuntu operating system) and `python` (which contains everything needed to run a basic Python app).\n\nI won't dive into too much details about each command you can use as these will be described more in-depth within the examples. You can find detailed documentation on the commands you can use in a Dockerfile here: https://docs.docker.com/engine/reference/builder/\n\n## Docker CLI\n\nGreat, so now I know a little bit about how Docker actually works, how do I get started? First, let's make sure our Docker install works correctly. You can do this by opening your favourite terminal and entering `docker run hello-world`. You should get something that looks like:\n\n```bash\n$ docker run hello-world\n\nHello from Docker.\nThis message shows that your installation appears to be working correctly.\n...\n```\n\nNow, let's go over a few basic CLI commands that you'll probably be using as you work with Docker.\n\n### `docker build`\n\n\u003e How do I turn a Dockerfile into an actual image?\n\nTo built an image, you can do `docker build . -t \u003cname-of-image\u003e` which tells Docker to look in the current directory for a file called `Dockerfile` and to follow the instructions inside to build an image. After doing so, tag the image so we can easily find it later. Docker image tags let you version your images as well. Say you wanted to build a v1 for your image, you would do `docker build . -t \u003cname-of-image\u003e:v1`. If you have a different name for your Dockerfile, you can also refer to it using the `-f` flag like so: `docker build . -t \u003cname-of-image\u003e -f \u003cname-of-dockerfile\u003e`\n\nMore info can be found here: https://docs.docker.com/engine/reference/commandline/build/\n\n### `docker image ls`\n\n\u003e How do I get a list of all the images I've built?\n\nThe command will give you an output that looks something like the following.\n\n```bash\nREPOSITORY                 TAG                 IMAGE ID            CREATED             SIZE\nimage1                     0.1.1               9eb95c7f06b0        2 days ago          343MB\nimage2                     \u003cnone\u003e              c99ac06cf60a        2 days ago           23MB\n...\n```\n\nMore info can be found here: https://docs.docker.com/engine/reference/commandline/image_ls/\n\n### `docker run`\n\n\u003e How do I create a container from an image?\n\nNow that you've built an image, you can just run it by doing `docker run \u003cname-of-container\u003e:\u003cversion\u003e`. More often than not, you can just use the latest version of the image, `docker run \u003cname-of-container\u003e:latest`. However, certain applications (like servers) need to listen on specific ports. By default, Docker doesn't allow containers to use ports on your local machine, but you can allow this by specifying ports using the `-p` flag, `docker run -p \u003chost-port\u003e:\u003ccontainer-port\u003e \u003cname-of-container\u003e`. If your container listens on port 3000, but you want it to appear as port 5000 on your local machine, it would look like `docker run -p 5000:3000 \u003cname-of-container\u003e`\n\nIf you want to run your container in the background in a detached manner, you can just add the `-d` flag.\n\nMore info can be found here: https://docs.docker.com/engine/reference/commandline/run/\n\n### `docker ps`\n\n\u003e How do I figure out what containers are currently running?\n\nYou can get a list of currently running containers by doing `docker ps`, which will give you each container running along with details about its Container ID, what image it was created from, when it was created, as well as which ports are open.\n\n### `docker exec`\n\n\u003e How do I run a command inside a container?\n\nYou can use the command `docker exec -it \u003ccontainer name\u003e /bin/bash` to get a bash shell in the container, allowing you to run commands from within the container as if it was a full-fledged machine. If you know specifically what command you want to execute, you can use `docker exec -it \u003ccontainer name\u003e \u003ccommand\u003e` to execute whatever command you specify in the container.\n\n# üìö Further reading\n\nThese topics will not be talked about within this repository, but I've added a few resources I've found helpful in my understanding of each of them.\n\n## Docker Compose\n\nDocker Compose is a tool that lets you start multiple Docker containers together and configure how they interact.\n\n- https://docs.docker.com/compose/\n- https://github.com/docker/compose\n\n## Kubernetes and Microservices\n\nWhat's all the hype about? Basically, its the [single responsibility principle](https://en.wikipedia.org/wiki/Single-responsibility_principle) but applied to services. This means that each responsibility should, ideally, be split out into its own service and be completely responsible for that one thing. This lends itself really easily to Docker and containers. Kubernetes is a system that makes it really easy to deploy, scale, and manage a bunch of containers, making it near ideal in creating a microservices architecture using Docker. Bottom here you can find some useful links.\n\n- https://microservices.io/\n- https://medium.com/hashmapinc/the-what-why-and-how-of-a-microservices-architecture-4179579423a9\n- https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/\n- https://kubernetes.io/docs/tutorials/kubernetes-basics/\n- https://opensource.com/article/17/11/getting-started-kubernetes\n\n## Deploying to the Cloud\n\nNow that you got some cool new containers? How do I run them in the Cloud like all the other cool kids? Thankfully, Docker makes this super easy too.\n\n### Google Cloud Run (GCR)\n\n\u003e https://cloud.google.com/run\n\nGCR completely manages scaling and deploying your containers for you so you don't need to worry about server management (yay serverless)! Simply upload your images to Google Container Registry, and create a new Cloud Run deployment.\n\n- https://cloud.google.com/run/docs/quickstarts/prebuilt-deploy\n- https://cloud.google.com/run/docs/quickstarts/build-and-deploy\n\n### Google Kubernetes Engine (GKE)\n\n\u003e https://cloud.google.com/kubernetes-engine\n\nWant to run your own Kubernetes cluster and have a lot of money to burn? GKE may be right for you! Other than the price, GKE is super user friendly and makes it really easy to manage and visualize your deployments.\n\n### Amazon Fargate\n\n\u003e https://aws.amazon.com/fargate/\n\nThink GCR but Bezos.\n\n- https://medium.com/@ariklevliber/aws-fargate-from-start-to-finish-for-a-nodejs-app-9a0e5fbf6361\n","lastmodified":"2024-01-08T16:17:25.031362373Z","tags":[]},"/notes/How-To-Fork-a-GitHub-Repository-Submit-a-Pull-Request":{"title":"Fork \u0026 Pull Request GitHub","content":"Contributing to an open-source project can be intimidating at first. The convoluted process of submitting your improvements for approval via a¬†[**pull request**](https://help.github.com/en/articles/about-pull-requests)¬†certainly doesn‚Äôt help.\n\nThe following steps to submit a pull request will work on Git repositories hosted anywhere ‚Äî on¬†[GitLab](https://gitlab.com/),¬†[Bitbucket](https://bitbucket.org/),¬†[Azure DevOps](https://azure.microsoft.com/en-us/services/devops/repos/), etc. ‚Äî but most open-source repositories one would want to contribute to are likely on¬†[**GitHub**](https://github.com/), which is what we‚Äôll be using.\n\nStarting from the very beginning, we‚Äôll fork an existing repository to our account, clone the fork locally, commit your changes to a new branch, and push it back upstream to GitHub to submit for approval.\n\nBut first, some 101 concepts about git (in a nutshell):\n\n\u003e [!INFO] Git 101\n\u003e\n\u003e - **commit** : add your changes to your local repository;\n\u003e - **push** : your local commits are pushed to the remote repository;\n\u003e - **fetch** : fetch from the remote git the modifications inherent to the metadata of the branches (commits, tags, etc..) and update the local repository with new branches created.\n\u003e - **merge** : after a pull, in case of modifications in the same file/lines, git requests to perform a \"merge\" or to merge the modifications manually avoiding losing or overwriting lines of code.\n\u003e - **pull** : download the \"changes\" (modifications made to the code) from the remote git and update the local files.\n\u003e - **rebase**: during a pull with conflicts it is possible to perform a \"rebase\", the local branch will first be aligned with the latest remote changes, then the local changes will be applied and in case of further conflicts requested I join.\n\u003e - **stash**: the changes made in the local branch are temporarily moved to another folder, bringing back the previous state of the local branch (useful for performing a pull or a rebase of the local branch to then remove the stash and avoid possible conflicts).\n\n## 1. Forking the Repository\n\nAssuming you‚Äôre using GitHub, this step is easy. Just find the repository you‚Äôre contributing to and press the Fork button in the upper right. This will create an exact copy of the repository (and all of its branches) under your own username.\n![Step 1](https://i.imgur.com/j7qec6R.png)\n\n## 2. Clone your new fork locally\n\nGitHub will automatically redirect you to the forked repository under your username. This is the repository you need to clone to your local development environment,¬†**not**¬†the original. Grab the URL GitHub provides under the green ‚ÄúClone or Download‚Äù button and plug it into the command below.\n\n`git clone git@github.com:MattiaIppoliti/react-native.git`\n\n![Step 2](https://i.imgur.com/Zh0C7NN.png)\n\n## 3. Track the original repository as a remote of the fork\n\n_This step is technically optional, but important if you plan to continue contributing to a project in the future, so we might as well..._\n\nOnce you‚Äôve forked a repository, changes to the original (or ‚Äúupstream‚Äù) repository are not pushed to your fork. We need to tell the new repository to follow changes made upstream to keep it fresh via¬†[remotes](https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes).\n\nSwitch directories to the forked repository you just cloned and run the following commands. Replace the last part of the first line with the¬†**original**¬†repository clone URL ‚Äî similar to the how you grabbed the URL in step 2, but this¬†**isn‚Äôt**¬†the one with your username.\n\nThis links the fork back to the original repository as a remote, which we‚Äôll name¬†`upstream`, and then fetch it.\n\n`git remote add --track master upstream git@github.com:facebook/react-native.git git fetch upstream`\n\n## 4. Create a new branch for your changes\n\nIt‚Äôs possible to make changes directly to the¬†`master`¬†branch, but this might FUBAR things down the road for complicated reasons. It‚Äôs best to¬†[`checkout`](https://git-scm.com/docs/git-checkout)¬†a new branch for¬†**each**¬†change/improvement you want to make. Replace¬†`fix-readme-typo`¬†with a more descriptive name for your changes, like¬†`add-mobile-site`¬†or¬†`update-dependencies`.\n\n`git checkout -b fix-readme-typo upstream/master`\n\n## 5. Make your changes!\n\nThis is either the easiest part or the hardest part, depending on how you look at it. At this point, you‚Äôre isolated in the new branch you just created, and it‚Äôs safe to open whatever text editor or IDE you use and go wild.\n\n## 6. Add, commit, and push the changes\n\nYou‚Äôre probably used to these commands. Add the files you‚Äôve changed and commit them with a descriptive message.\n\n`git add . git commit -m \"Fix grammar mistakes in the readme file\"`\n\nThe one difference is the branch you‚Äôre pushing to. You likely usually push to¬†`master`, but in this case, we‚Äôre pushing to the branch with the name you created in step 4.\n\n`git push -u origin fix-readme-typo`\n\n## 7. Submit your pull request\n\nYou‚Äôre now all ready to submit the improvement you‚Äôve made to the project‚Äôs maintainers for approval. Head over to the original repositories Pull Requests tab, and you should see an automatic suggestion from GitHub to create a pull request from your new branch.\n![Step 7.1](https://i.imgur.com/rjUhe4e.png)\n![Step 7.2](https://i.imgur.com/IYCVFD2.png)\n","lastmodified":"2024-01-08T16:17:25.031362373Z","tags":["programming"]},"/notes/config":{"title":"Configuration","content":"\n## Configuration\nQuartz is designed to be extremely configurable. You can find the bulk of the configuration scattered throughout the repository depending on how in-depth you'd like to get.\n\nThe majority of configuration can be found under `data/config.yaml`. An annotated example configuration is shown below.\n\n```yaml {title=\"data/config.yaml\"}\n# The name to display in the footer\nname: Mattia Ippoliti\n\n# whether to globally show the table of contents on each page\n# this can be turned off on a per-page basis by adding this to the\n# front-matter of that note\nenableToc: true\n\n# whether to by-default open or close the table of contents on each page\nopenToc: false\n\n# whether to display on-hover link preview cards\nenableLinkPreview: true\n\n# whether to render titles for code blocks\nenableCodeBlockTitle: true \n\n# whether to render copy buttons for code blocks\nenableCodeBlockCopy: true \n\n# whether to render callouts\nenableCallouts: true\n\n# whether to try to process Latex\nenableLatex: true\n\n# whether to enable single-page-app style rendering\n# this prevents flashes of unstyled content and improves\n# smoothness of Quartz. More info in issue #109 on GitHub\nenableSPA: true\n\n# whether to render a footer\nenableFooter: true\n\n# whether backlinks of pages should show the context in which\n# they were mentioned\nenableContextualBacklinks: true\n\n# whether to show a section of recent notes on the home page\nenableRecentNotes: false\n\n# whether to display an 'edit' button next to the last edited field\n# that links to github\nenableGitHubEdit: true\nGitHubLink: https://github.com/jackyzha0/quartz/tree/hugo/content\n\n# whether to render mermaid diagrams\nenableMermaid: true\n\n# whether to use Operand to power semantic search\n# IMPORTANT: replace this API key with your own if you plan on using\n# Operand search!\nsearch:\n  enableSemanticSearch: false\n  operandApiKey: \"REPLACE-WITH-YOUR-OPERAND-API-KEY\"\n  operandIndexId: \"REPLACE-WITH-YOUR-OPERAND-INDEX-ID\"\n\n# page description used for SEO\ndescription:\n  Host your second brain and digital garden for free. Quartz features extremely fast full-text search,\n  Wikilink support, backlinks, local graph, tags, and link previews.\n\n### Code Block Titles\nTo add code block titles with Quartz:\n\n1. Ensure that code block titles are enabled in Quartz's configuration:\n\n    ```yaml {title=\"data/config.yaml\", linenos=false}\n    enableCodeBlockTitle: true\n    ```\n\n2. Add the `title` attribute to the desired [code block\n   fence](https://gohugo.io/content-management/syntax-highlighting/#highlighting-in-code-fences):\n\n      ```markdown {linenos=false}\n       ```yaml {title=\"data/config.yaml\"}\n       enableCodeBlockTitle: true  # example from step 1\n       ```\n      ```\n\n**Note** that if `{title=\u003cmy-title\u003e}` is included, and code block titles are not\nenabled, no errors will occur, and the title attribute will be ignored.\n\n### HTML Favicons\nIf you would like to customize the favicons of your Quartz-based website, you \ncan add them to the `data/config.yaml` file. The **default** without any set \n`favicon` key is:\n\n```html {title=\"layouts/partials/head.html\", linenostart=15}\n\u003clink rel=\"shortcut icon\" href=\"icon.png\" type=\"image/png\"\u003e\n```\n\nThe default can be overridden by defining a value to the `favicon` key in your \n`data/config.yaml` file. For example, here is a `List[Dictionary]` example format, which is\nequivalent to the default:\n\n```yaml {title=\"data/config.yaml\", linenos=false}\nfavicon:\n  - { rel: \"shortcut icon\", href: \"icon.png\", type: \"image/png\" }\n#  - { ... } # Repeat for each additional favicon you want to add\n```\n\nIn this format, the keys are identical to their HTML representations.\n\nIf you plan to add multiple favicons generated by a website (see list below), it\nmay be easier to define it as HTML. Here is an example which appends the \n**Apple touch icon** to Quartz's default favicon:\n\n```yaml {title=\"data/config.yaml\", linenos=false}\nfavicon: |\n  \u003clink rel=\"shortcut icon\" href=\"icon.png\" type=\"image/png\"\u003e\n  \u003clink rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/apple-touch-icon.png\"\u003e\n```\n\nThis second favicon will now be used as a web page icon when someone adds your \nwebpage to the home screen of their Apple device. If you are interested in more \ninformation about the current and past standards of favicons, you can read \n[this article](https://www.emergeinteractive.com/insights/detail/the-essentials-of-favicons/).\n\n**Note** that all generated favicon paths, defined by the `href` \nattribute, are relative to the `static/` directory.\n\n### Graph View\nTo customize the Interactive Graph view, you can poke around `data/graphConfig.yaml`.\n\n```yaml {title=\"data/graphConfig.yaml\"}\n# if true, a Global Graph will be shown on home page with full width, no backlink.\n# A different set of Local Graphs will be shown on sub pages.\n# if false, Local Graph will be default on every page as usual\nenableGlobalGraph: false\n\n### Local Graph ###\nlocalGraph:\n    # whether automatically generate a legend\n    enableLegend: false\n    \n    # whether to allow dragging nodes in the graph\n    enableDrag: true\n    \n    # whether to allow zooming and panning the graph\n    enableZoom: true\n    \n    # how many neighbours of the current node to show (-1 is all nodes)\n    depth: 1\n    \n    # initial zoom factor of the graph\n    scale: 1.2\n    \n    # how strongly nodes should repel each other\n    repelForce: 2\n\n    # how strongly should nodes be attracted to the center of gravity\n    centerForce: 1\n\n    # what the default link length should be\n    linkDistance: 1\n    \n    # how big the node labels should be\n    fontSize: 0.6\n    \n    # scale at which to start fading the labes on nodes\n    opacityScale: 3\n\n### Global Graph ###\nglobalGraph:\n\t# same settings as above\n\n### For all graphs ###\n# colour specific nodes path off of their path\npaths:\n  - /moc: \"#4388cc\"\n```\n\n\n## Styling\nWant to go even more in-depth? You can add custom CSS styling and change existing colours through editing `assets/styles/custom.scss`. If you'd like to target specific parts of the site, you can add ids and classes to the HTML partials in `/layouts/partials`. \n\n### Partials\nPartials are what dictate what gets rendered to the page. Want to change how pages are styled and structured? You can edit the appropriate layout in `/layouts`.\n\nFor example, the structure of the home page can be edited through `/layouts/index.html`. To customize the footer, you can edit `/layouts/partials/footer.html`\n\nWant to support languages that read from right-to-left (like Arabic)? Hugo (and by proxy, Quartz) supports this natively.\n\nFor example:\n\n```toml\ndefaultContentLanguage = 'ar'\n[languages]\n  [languages.ar]\n    languagedirection = 'rtl'\n    title = 'ŸÖÿØŸàŸÜÿ™Ÿä'\n    weight = 1\n```\n","lastmodified":"2024-01-08T16:17:25.031362373Z","tags":["setup"]},"/notes/docker":{"title":"Hosting with Docker","content":"\nIf you want to host Quartz on a machine without using a webpage hosting service, it may be easier to [install Docker Compose](https://docs.docker.com/compose/install/) and follow the instructions below than to [install Quartz's dependencies manually](notes/preview%20changes.md).\n## Hosting Quartz Locally\nYou can serve Quartz locally at `http://localhost:1313` with the following script, replacing `/path/to/quartz` with the \nactual path to your Quartz folder.\n\ndocker-compose.yml\n```\nservices:\n  quartz-hugo:\n    image: ghcr.io/jackyzha0/quartz:hugo\n    container_name: quartz-hugo\n    volumes:\n      - /path/to/quartz:/quartz\n    ports:\n      - 1313:1313\n\n    # optional\n    environment:\n      - HUGO_BIND=0.0.0.0\n      - HUGO_BASEURL=http://localhost\n      - HUGO_PORT=1313\n      - HUGO_APPENDPORT=true\n      - HUGO_LIVERELOADPORT=-1\n```\n\nThen run with: `docker-compose up -d` in the same directory as your `docker-compose.yml` file.\n\nWhile the container is running, you can update the `quartz` fork with: `docker exec -it quartz-hugo make update`.\n\n## Exposing Your Container to the Internet\n\n### To Your Public IP Address with Port Forwarding (insecure)\n\nAssuming you are already familiar with [port forwarding](https://en.wikipedia.org/wiki/Port_forwarding) and [setting it up with your router model](https://portforward.com):\n\n1. You should set the environment variable `HUGO_BASEURL=http://your-public-ip` and then start your container.\n2. Set up port forwarding on your router from port `p` to `your-local-ip:1313`.\n3. You should now be able to access Quartz from outside your local network at `http://your-public-ip:p`.\n\nHowever, your HTTP connection will be unencrypted and **this method is not secure**.\n\n### To a Domain using Cloudflare Proxy\n\n1. Port forward 443 (HTTPS) from your machine.\n2. Buy a custom domain (say, `your-domain.com`) from [Cloudflare](https://www.cloudflare.com/products/registrar/). Point a DNS A record from `your-domain.com` to your public IP address and enable the proxy.\n3. Set the environment variables `HUGO_BASEURL=https://your-domain.com`, `HUGO_PORT=443`, and `HUGO_APPENDPORT=false`. Change `1313:1313` to `443:443` for the `ports` in `docker-compose.yml`.\n4. Spin up your Quartz container and enjoy it at `https://your-domain.com`!\n\n### To a Domain using a Reverse Proxy\n\nIf you want to serve more than just Quartz to the internet on this machine (or don't want to use the Cloudflare registrar and proxy), you should follow the steps in the section above (as appropriate) and also set up a reverse proxy, like [Traefik](https://doc.traefik.io/traefik). Be sure to configure your TLS certificates too!\n","lastmodified":"2024-01-08T16:17:25.031362373Z","tags":["setup"]},"/notes/economics-works":{"title":"How The Economic Machine Works","content":"# How The Economic Machine Works\n**Autor**: Ray Dalio\nWatch this: Video: https://www.youtube.com/watch?v=PHe0bXAIuk0)\n\n```ad-quote\ntitle: Ray Dalio\nIl mondo √® inpazzito e il sistema √® rotto\n```\n\n\n## 1.What is the Economy\nIt's made up of a few simple parts and a lot of simple transactions that are repeated over and over again a zillion times.\n\nThese transactions are above all else driven by human nature, and they create 3 main forces that drive the economy:\n\n- Productivity growth\n- The Short term debt cycle\n- The Long term debt cycle\n\n### 1.1 Transaction\nYou make transactions all the time. Every time you buy something you create a transaction.\n\nEach transaction consists of a buyer exchanging money or credit with a seller for goods, services or financial assets.\n\nSo adding together the money spent and the amount of credit spent, you can know the **total spending**. The total amount of spending drives the economy.\n\nIf you divide the amount spent by the quantity sold, you get the **price**. \nAnd that's it. That's a **[[transaction]]**.\n\n- All cycles and all forces in an economy are driven by transactions. So, if we can understand transactions, we can understand the whole economy.\n- A market consists of all the buyers and all the sellers making transactions for the same thing. For example, there is a wheat market, a car market, a stock market.\n- An economy consists of all of the transactions in all of its markets.\n\nThe biggest buyer and seller is the government, which consists of two important parts:\n\n- a Central Government that **collects taxes and spends money**;\n\n- Central Bank, which is different from other buyers and sellers because it **controls the amount of money and credit in the economy**. It does this by influencing interest rates and printing new money. the Central Bank is an important player in the flow of **[[Credit]]**.\n\n### 1.2 Credit\nJust like buyers and sellers go to the market to make transactions, so do lenders and borrowers.\n\nLenders usually want to make their money into more money and borrowers usually want to buy something they can't afford, like a house or car. \n\nBorrowers promise to repay the amount they borrow, called the principal, plus an additional amount, called **interest**. When interest rates are high, there is less borrowing because it's expensive. When borrowers promise to repay and lenders believe them, credit is created.\n\nAs soon as credit is created, it immediately turns into debt. Debt is both an asset to the lender, and a liability to the borrower.\n\n*So, why is credit so important?*\n\nBecause when a borrower receives credit, he is able to increase his spending. And remember, spending drives the economy. This is because one person's spending is another person's income. \n\nSo increased income allows increased borrowing (from the bank) which allows increased spending. And since one person's spending is another person's income, this leads to more increased borrowing and so on. This self-reinforcing pattern leads to economic growth and is why we have **Cycles**.\n\n\n## 2. Productivity growth\nThose who were invented and hard-working raise their productivity and their living standards faster than those who are complacent and lazy. BUT Productivity matters most in the long run, but **[[Credit]]** matters most in the **short run**.\n\nThis is because productivity growth doesn't fluctuate much (it is a linear function), so it's not a big driver of economic swings. **[[Debt]]** is(non linear function) ‚Äî because it allows us to consume more than we produce when we acquire it and it forces us to consume less than we produce when we pay it back.\n\nDebt swings occur in two big cycles:\n- One takes about 5 to 8 years;\n- The other takes about 75 to 100 years.\n\n\n*But How does these three big forces (**Productivity**, **Debt**, **Credit**) interact with each others?*\n\nThese non linear function that swings around the line are not due to how much **innovation** or hard work there is, they're primarily due to how much **credit** there is.\n\nLet's for a second imagine an economy without credit. In this economy, the only way I can increase my spending is to increase my income, which requires me to be more productive and do more work. Increased productivity is the only way for growth: **Linear**.\n\nBut because we borrow, we have cycles. This isn't due to any laws or regulation, it's due to human nature and the way that credit works.\n\nThink of borrowing as simply a way of **pulling spending forward**. In order to buy something you can't afford, you need to spend more than you make. To do this, you essentially need to borrow from your future self. In doing so you create a time in the future that you need to spend less than you make in order to pay it back. It very quickly resembles a **cycle**.\n\nThe reality is that most of what people call money is actually credit. The total amount of credit in the United States is about $50 trillion and the total amount of money is only about $3 trillion.\n\nAs a result, an economy with credit has more spending and allows incomes to rise faster than productivity over the short run, but not over the long run.\n\n**NB**: Now, don't get me wrong, credit isn't necessarily something bad that just causes cycles. For example, if you borrow money to buy a big TV, it doesn't generate income for you to pay back the debt. But, if you borrow money to buy a tractor ‚Äî and that tractor let's you harvest more crops and earn more money ‚Äî then, you can pay back your debt.\n\n## 3.The Short term debt cycle\nSuppose you earn $100,000 a year and have no debt. You are creditworthy enough to borrow $10,000 dollars, so you can spend $110,000 dollars even though you only earn $100,000 dollars. \n\nSince your spending is another person's income, someone is earning $110,000 dollars. The person earning $110,000 dollars with no debt can borrow $11,000 dollars, so he can spend $121,000 dollars even though he has only earned $110,000 dollars. His spending is another person's income, exc. A cycle is beginning.\n\nAnd if the cycle goes up, it eventually needs to come down. This leads us into the **Short Term Debt Cycle**.\n\n### 3.1 Inflation\nAs economic activity increases, we see an [[expansion]], the first phase of the short term debt cycle. Spending continues to increase and prices start to rise. When prices rise, we call this **[[Inflazione]]**.\n\nThe Central Bank doesn't want too much inflation because it causes problems. Seeing prices rise, it **raises interest rates**. With higher interest rates, fewer people can afford to borrow money.\n### 3.2 Deflation / Recession\nBecause people borrow less and have higher debt repayments, they have less money leftover to spend, so spending slows ...and since one person's spending is another person's income, incomes drop! \nWhen people spend less, prices go down. We call this **[[deflazione]]**.\n\nEconomic activity decreases and we have a [[recessione]]. \n\n### 3.3 ...and again Inflation\nIf the recession becomes too severe and inflation is no longer a problem, the central bank will **lower interest rates** to cause everything to pick up again.\n\nWith low interest rates, debt repayments are reduced and borrowing and spending pick up and we see another **[[expansion]]**.\n\nAnd note that this cycle is controlled primarily by the central bank. The short term debt cycle typically lasts 5 - 8 years and happens over and over again for decades. \n\n..But notice that the bottom and top of each cycle finish with more growth than the previous cycle and with more debt. \n\n*Why?*\nBecause people push it ‚Äî they have an inclination to borrow and spend more instead of paying back debt. It's human nature. Over long periods of time, debts rise faster than incomes creating the **Long Term Debt Cycle**.\n\n\n## 4.The Long term debt cycle\nDespite people becoming more indebted, lenders even more freely extend credit (that's strange, banks should be reclined to give credit to people that are in debt!). \n\nBut Why lenders do that? Because everybody thinks things are going great! They can see only the short term. Incomes have been rising! Asset values are going up! The stock market roars! It's a boom! When people do a lot of that, we call it a **bubble**.\n\nSo even though debts have been growing, incomes have been growing nearly as fast to offset them.\n\nPeople borrow huge amounts of money to buy assets as investments causing their prices to rise even higher. Over decades, debt burdens slowly increase creating larger and larger debt repayments. \n\nAt some point, **debt repayments start growing faster than incomes** forcing people to cut back on their spending. And since one person's spending is another person's income, incomes begin to go down...which makes people less creditworthy causing borrowing to go down. This is the **long term debt peak**.\n\n### 4.1 Short term VS Long term\n*But what is the difference between this situation and the short-term?*\nThis appears similar to a recession but the difference here in a [[Deleveraging]] is that **interest rates can't be lowered** to save the day.\n\nIn a [[Deleveraging]]; people cut spending, incomes fall, credit disappears, assets prices drop, banks get squeezed, the stock market crashes, social tensions rise. borrowers get squeezed. No longer creditworthy, and they can no longer borrow enough money to make their debt repayments. \n\nSo borrowers are forced to sell assets. The rush to sell assets floods the market. More people wanna sell so they prices go down.This is when the stock market collapses.\n\nIn a recession, lowering interest rates works to stimulate the borrowing. However, in a [[Deleveraging]], lowering interest rates doesn't work because interest rates are already low and soon hit 0% - so the stimulation ends.\n\nThe difference between a recession and a deleveraging is that in a deleveraging borrowers' debt burdens have simply gotten too big and can't be relieved by lowering interest rates.\n\n### 4.2 Possibile Solutions\n*So what do you do about a deleveraging?*\n\nThe problem is debt burdens are too high and they must come down. There are four ways this can happen:\n1. Austerity: People, businesses, and governments cut their spending.\n2. Debts are reduced through defaults and restructurings.\n3. Wealth is redistributed from the 'haves' to the 'have nots'.\n4. The central bank prints new money.\n\n### 4.3 Austerity\nUsually, spending is cut first. Because spending is cut, and one man's spending is another man's income - it causes incomes to fall. They fall faster than debts are repaid and the debt burden actually gets worse.\n\nThis cut in spending is deflationary and painful. Businesses are forced to cut costs... which means less jobs and higher unemployment.\n\n\n### 4.4 Reducing Debts\nMany borrowers find themselves unable to repay their loans -- and a borrower's debts are a lender's assets. When borrowers don't repay the bank, people get nervous that the bank won't be able to repay them so they rush to withdraw their money from the bank. Banks get squeezed.\n\nThis severe economic contraction is a **[[depression]]**.\n\n### 4.5 Welth is redistributed\nAll of this impacts the central government because lower incomes and less employment means the government **collects fewer taxes**. At the same time it needs to increase its spending because unemployment has risen.\n\nAdditionally, governments create stimulus plans and increase their spending to make up for the decrease in the economy.\n\nGovernments' budget **[[deficits]]** explode in a deleveraging because they spend more than they earn in taxes. This is what is happening when you hear about the budget **[[deficit]]** on the news.\n\nTo fund their deficits, governments need to either raise taxes or borrow money. But with incomes falling and so many unemployed, who is the money going to come from? The **rich**.\n\nSince governments need more money and since wealth is heavily concentrated in the hands of a small percentage of the people, governments naturally raise taxes on the wealthy which facilitates a redistribution of wealth in the economy. \n\nIf the depression continues social disorder can break out. This situation can lead to political change that can sometimes be extreme. In the 1930s, this led to Hitler coming to power.\n\n### 4.6 Printing money\n\nInevitably, the central bank prints new money ‚Äî out of thin air ‚Äî and uses it to buy financial assets and government bonds. In 2008, when the United States' central bank ‚Äî the Federal Reserve ‚Äî printed over two trillion dollars. **$5.2 trillion** in COVID.\n\nThe Central Government, on the other hand, can buy goods and services and put money in the hands of the people but it can't print money. So, in order to stimulate the economy, the two must cooperate.\n\nBy buying government bonds, the Central Bank essentially lends money to the government, allowing it to run a deficit and increase spending on goods and services through its stimulus programs and unemployment benefits.\n\n\nHowever, it will lower the economy's total debt burden. This is a very risky time. The deflationary ways need to balance with the inflationary ways in order to maintain stability. If balanced correctly, there can be a Beautiful Deleveraging.\n\n### 4.7 How a Deleveraging could be a good situation (more than leveraging)?\nEven though a deleveraging is a difficult situation, handling a difficult situation in the best possible way is beautiful. A lot more beautiful than the debt-fueled, unbalanced excesses of the leveraging phase. \n\nIn a beautiful deleveraging, debts decline relative to income, real economic growth is positive, and inflation isn't a problem. It is achieved by having the right balance.\n\nThe right balance requires a certain mix of:\n- cutting spending, \n- reducing debt, \n- transferring wealth\n- printing money \n\nThe Central Bank needs to not only pump up income growth but get the rate of income growth higher than the rate of interest on the accumulated debt. Basically, income needs to grow faster than debt grows.\n\nSo If policymakers achieve the right balance, a deleveraging isn't so dramatic. Growth is slow but debt burdens go down.\n\n### 4.8 [[Reflation]]\nWhen incomes begin to rise, borrowers begin to appear more creditworthy. And when borrowers appear more creditworthy, lenders begin to lend money again. Debt burdens finally begin to fall.\n\nAble to borrow money, people can spend more. Eventually, the economy begins to grow again, leading to the [[reflation]] phase of the long term debt cycle. It takes roughly a **decade** or more for debt burdens to fall and economic activity to get back to normal\n\n## 5.Conclusion\nLaying the short term debt cycle on top of the long term debt cycle and then laying both of them on top of the productivity growth line gives a reasonably good template for seeing where we've been, where we are now and where we are probably headed.\n\nSo in summary, there are three rules of thumb that I'd like you to take away from this:\n\n1. Don't have debt rise faster than income, because your debt burdens will eventually crush you.\n\n2. Don't have income rise faster than productivity, because you will eventually become uncompetitive.\n\n3. Do all that you can to raise your productivity, because, in the long run, that's what matters most.\n\n","lastmodified":"2024-01-08T16:17:25.031362373Z","tags":["economics"]},"/notes/editing":{"title":"Editing Content in Quartz","content":"\n## Editing \nQuartz runs on top of [Hugo](https://gohugo.io/) so all notes are written in [Markdown](https://www.markdownguide.org/getting-started/).\n\n### Folder Structure\nHere's a rough overview of what's what.\n\n**All content in your garden can found in the `/content` folder.** To make edits, you can open any of the files and make changes directly and save it. You can organize content into any folder you'd like.\n\n**To edit the main home page, open `/content/_index.md`.**\n\n### Front Matter\nHugo is picky when it comes to metadata for files. Make sure that your title is double-quoted and that you have a title defined at the top of your file like so, otherwise the generated page will not have a title!\n\nYou can also add tags here as well.\n\n```yaml\n---\ntitle: \"Example Title\"\ntags:\n- example-tag\n---\n\nRest of your content here...\n```\n\n### Obsidian\nI recommend using [Obsidian](http://obsidian.md/) as a way to edit and grow your digital garden. It comes with a really nice editor and graphical interface to preview all of your local files.\n\nThis step is **highly recommended**.\n\n\u003e üîó Step 3: [How to setup your Obsidian Vault to work with Quartz](notes/obsidian.md)\n\n## Previewing Changes\nThis step is purely optional and mostly for those who want to see the published version of their digital garden locally before opening it up to the internet. This is *highly recommended* but not required.\n\n\u003e üëÄ Step 4: [Preview Quartz Changes](notes/preview%20changes.md)\n\nFor those who like to live life more on the edge, viewing the garden through Obsidian gets you pretty close to the real thing.\n\n## Publishing Changes\nNow that you know the basics of managing your digital garden using Quartz, you can publish it to the internet!\n\n\u003e üåç Step 5: [Hosting Quartz online!](notes/hosting.md)\n","lastmodified":"2024-01-08T16:17:25.031362373Z","tags":["setup"]},"/notes/hosting":{"title":"Deploying Quartz to the Web","content":"\n## Hosting on GitHub Pages\nQuartz is designed to be effortless to deploy. If you forked and cloned Quartz directly from the repository, everything should already be good to go! Follow the steps below.\n\n### Enable GitHub Actions Permissions\nBy default, GitHub disables workflows from modifying your files (for good reason!). However, Quartz needs this to write the actual site files back to GitHub.\n\nHead to `Settings \u003e Action \u003e General \u003e Workflow Permissions` and choose `Read and Write Permissions`\n\n![Enable GitHub Actions](/notes/images/github-actions.png)\n*Enable GitHub Actions*\n\n### Enable GitHub Pages\n\nHead to the 'Settings' tab of your forked repository and go to the 'Pages' tab.\n\n1. (IMPORTANT) Set the source to deploy from `master` (and not `hugo`) using `/ (root)`\n2. Set a custom domain here if you have one!\n\n![Enable GitHub Pages](/notes/images/github-pages.png)*Enable GitHub Pages*\n\n### Pushing Changes\nTo see your changes on the internet, we need to push it them to GitHub. Quartz is a `git` repository so updating it is the same workflow as you would follow as if it were just a regular software project.\n\n```shell\n# Navigate to Quartz folder\ncd \u003cpath-to-quartz\u003e\n\n# Commit all changes\ngit add .\ngit commit -m \"message describing changes\"\n\n# Push to GitHub to update site\ngit push origin hugo\n```\n\nNote: we specifically push to the `hugo` branch here. Our GitHub action automatically runs everytime a push to is detected to that branch and then updates the `master` branch for redeployment.\n\n### Setting up the Site\nNow let's get this site up and running. Never hosted a site before? No problem. Have a fancy custom domain you already own or want to subdomain your Quartz? That's easy too.\n\nHere, we take advantage of GitHub's free page hosting to deploy our site. Change `baseURL` in `/config.toml`. \n\nMake sure that your `baseURL` has a trailing `/`!\n\n[Reference `config.toml` here](https://github.com/jackyzha0/quartz/blob/hugo/config.toml)\n\n```toml\nbaseURL = \"https://\u003cYOUR-DOMAIN\u003e/\"\n```\n\nIf you are using this under a subdomain (e.g. `\u003cYOUR-GITHUB-USERNAME\u003e.github.io/quartz`), include the trailing `/`. **You need to do this especially if you are using GitHub!**\n\n```toml\nbaseURL = \"https://\u003cYOUR-GITHUB-USERNAME\u003e.github.io/quartz/\"\n```\n\nChange `cname` in `/.github/workflows/deploy.yaml`. Again, if you don't have a custom domain to use, you can use `\u003cYOUR-USERNAME\u003e.github.io`.\n\nPlease note that the `cname` field should *not* have any path `e.g. end with /quartz` or have a trailing `/`.\n\n[Reference `deploy.yaml` here](https://github.com/jackyzha0/quartz/blob/hugo/.github/workflows/deploy.yaml)\n\n```yaml {title=\".github/workflows/deploy.yaml\"}\n- name: Deploy  \n  uses: peaceiris/actions-gh-pages@v3  \n  with:  \n\tgithub_token: ${{ secrets.GITHUB_TOKEN }} # this can stay as is, GitHub fills this in for us!\n\tpublish_dir: ./public  \n\tpublish_branch: master\n\tcname: \u003cYOUR-DOMAIN\u003e\n```\n\nHave a custom domain? [Learn how to set it up with Quartz ](notes/custom%20Domain.md).\n\n### Ignoring Files\nOnly want to publish a subset of all of your notes? Don't worry, Quartz makes this a simple two-step process.\n\n## Docker Support\nIf you don't want to use a hosting service, you can host using [Docker](notes/docker.md) instead!\nI would *not use this method* unless you know what you are doing.\n\n---\n\nNow that your Quartz is live, let's figure out how to make Quartz really *yours*!\n\n\u003e Step 6: üé® [Customizing Quartz](notes/config.md)\n","lastmodified":"2024-01-08T16:17:25.031362373Z","tags":["setup"]},"/notes/obsidian":{"title":"Obsidian Vault Integration","content":"\n## Setup\nObsidian is the preferred way to use Quartz. You can either create a new Obsidian Vault or link one that your already have.\n\n### New Vault\nIf you don't have an existing Vault, [download Obsidian](https://obsidian.md/) and create a new Vault in the `/content` folder that you created and cloned during the [setup](notes/setup.md) step.\n\n### Linking an existing Vault\nThe easiest way to use an existing Vault is to copy all of your files (directory and hierarchies intact) into the `/content` folder.\n\n## Settings\nGreat, now that you have your Obsidian linked to your Quartz, let's fix some settings so that they play well.\n\nOpen Settings \u003e Files \u0026 Links and look for these two items:\n\n1. Set the **New link format** to **Absolute Path in vault**. If you have a completely flat vault (no folders), this step isn't necessary.\n2. Turn **on** the **Automatically update internal links** setting.\n\n## Templates\nInserting front matter everytime you want to create a new Note gets annoying really quickly. Luckily, Obsidian supports templates which makes inserting new content really easily.\n\n\u003e [!WARNING]\n\u003e \n\u003e **If you decide to overwrite the `/content` folder completely, don't remove the `/content/templates` folder!**\n\nHead over to Options \u003e Core Plugins and enable the Templates plugin. Then go to Options \u003e Hotkeys and set a hotkey for 'Insert Template' (I recommend `[cmd]+T`). That way, when you create a new note, you can just press the hotkey for a new template and be ready to go!\n\n\u003e üëÄ Step 4: [Preview Quartz Changes](notes/preview%20changes.md)\n\n## Latex\n\nBlock math works with two dollar signs `$$...$$`\n\n$$f(x) = \\int_{-\\infty}^\\infty\n    f\\hat(\\xi),e^{2 \\pi i \\xi x}\n    \\,d\\xi$$\n\t\nInline math also works with single dollar signs `$...$`. For example, Euler's identity but inline: $e^{i\\pi} = -1$\n\nAligned equations work quite well:\n\n$$\n\\begin{aligned}\na \u0026= b + c \\\\ \u0026= e + f \\\\\n\\end{aligned}\n$$\n\nAnd matrices\n\n$$\n\\begin{bmatrix}\n1 \u0026 2 \u0026 3 \\\\\na \u0026 b \u0026 c\n\\end{bmatrix}\n$$\n","lastmodified":"2024-01-08T16:17:25.031362373Z","tags":["setup"]},"/notes/preview-changes":{"title":"Preview Changes","content":"\nIf you'd like to preview what your Quartz site looks like before deploying it to the internet, the following\ninstructions guide you through installing the proper dependencies to run it locally.\n\n\n## Install `hugo-obsidian`\nThis step will generate the list of backlinks for Hugo to parse. Ensure you have [Go](https://golang.org/doc/install) (\u003e= 1.16) installed.\n\n```bash\n# Install and link `hugo-obsidian` locally\ngo install github.com/jackyzha0/hugo-obsidian@latest\n```\n\nIf you are running into an error saying that `command not found: hugo-obsidian`, make sure you set your `GOPATH` correctly! This will allow your terminal to correctly recognize hugo-obsidian as an executable.\n\n##  Installing Hugo\nHugo is the static site generator that powers Quartz. [Install Hugo with \"extended\" Sass/SCSS version](https://gohugo.io/getting-started/installing/) first. Then,\n\n```bash\n# Navigate to your local Quartz folder\ncd \u003clocation-of-your-local-quartz\u003e\n\n# Start local server\nmake serve\n\n# View your site in a browser at http://localhost:1313/\n```\n\n\u003e [!INFO] Docker Support\n\u003e\n\u003e If you have the Docker CLI installed already, you can avoid installing `hugo-obsidian` and `hugo`. Instead, open your terminal, navigate to your folder with Quartz and run `make docker`\n\nAfterwards, start the Hugo server as shown above and your local backlinks and interactive graph should be populated! Now, let's get it hosted online.\n\n\u003e üåç Step 5: [Hosting Quartz online!](notes/hosting.md)\n","lastmodified":"2024-01-08T16:17:25.031362373Z","tags":["setup"]},"/notes/principles":{"title":"Principles for Dealing with the Changing World Order","content":"# Principles for Dealing with the Changing World Order\n\n### 1. How to anticipate the future by studing the past\n**currency devaluation**: Back then paper dollars were also linked to gold which the us was running out of because it was spending more paper money checks then it had gold to exchange for them. Breaking the link to gold allowed the US to speding more than it erned, simply by printing more paper dollars, and the value of each dollar fell. Without a corrispendence in productinity, all this money went to buy lots of stocks gold and commodities and causes their price to rise!!\nThe excact same things happend many many times before:\n- 2008: leeman Brother\n- 1971: Nixon\n- 1933: Roosvelt\n- 1850: UK\n- 1650: Netherlands\nWhen governament  spent much more than they took in in taxes and conditions got bad they ran out of money and they needed more so they printed more.\n\n**Principles**: when central banks print a lot of money to relieve a crisis buy stocks gold and commodities because their value will rise and the value of paper money will fall\n\n**Principles**: to understand what is coming at you you need to understand what happened before you\n###### 1.1 What is a Reserver Currency\nAfter WW2 dollar as the world's leading reserve currency a **reserve currency** is a currency that is commonly accepted around the world and having one is a key factor in a country becoming the richest and most powerful empire. And a new world order begins. This is what we define as a **Big Cicle**.\n### 2 Big Cicle\nIf we take the history data, they transpired in overlapping cycles that lasted about 250 years with 10 to 20 year transition periods between them:\n\n###### 2.1 All the cycle of a new World Order\nIn a nutshell the big cycle typically begins after a major conflict often a war establishes the new leading power and the new world order.\n\nBecause no one wants to challenge this power a period of peace and prosperity typically follows as people get used to this peace and prosperity they increasingly bet on it continuing they **borrow money** to do that which eventually leads to a financial bubble. \n\nWhen most transactions are conducted in its currency it becomes a **reserve currency** (peak of the curve). \n\nWhich leads to even more borrowing at the same time this increased prosperity distributes wealth unevenly so the **wealth gap typically grows** between rich and pour.\n\nEventually the financial bubble bursts which leads to the printing of money and increased internal conflict between the rich and the poor which leads to some form of revolution to redistribute well.\n\nWhen a new rising power gets strong enough to compete with the dominant power that is having domestic breakdowns external conflicts most typically wars take place.\n## 3 The three phase of a typical cycle\nLet's describe the typical cycle by dividing it into three phases the rise the top and the decline:\n###### 2.1 The rise\n- strong education: provides a healthy respect for rules and laws order within society low corruption and enables them to unite behind a common purpose and work well together\n- They do this they increasingly shift from producing basic products to innovating and inventing new technologies\n- as a result the people in the country become more productive and more competitive in world markets which shows up in their growing economic output and rising share of world trade\n- they develop great military strength\n-  leads to strong income growth which can be used to finance investments in education infrastructure and research and development they must also develop systems to incentivize and empower those that have the ability to make or take wealth\n- Because their currency is so widely accepted and frequently used people around the world want to save in it making it the preferred storehold of wealth and thus the world's leading **reserve currency**. having a reserve currency enables the empire to borrow more than other countries. \n- they can always print more the exorbitant privilege afforded by the empire's reserve currency leads borrowing to increase and the beginning of a **financial bubble**\n###### 2.1 The top\n- As a rule as people in these rich and powerful countries earn more that makes them more expensive and less competitive relative to people in other countries who are willing to work for less at the same time people in other countries naturally copy the methods and technologies of the leading power which further reduces the leading power's competitiveness;\n- people get used to doing well they increasingly bet on the good times continuing and borrow money to do that which grows into financial bubbles\n- naturally the financial gains come unevenly so the **wealth gap grows**. wealth gaps are self-reinforcing because rich people use their greater resourcesto reinforce their powers for example they give greater privileges to their children like better education and they influence the political system to their advantage. as long as the living standards of most people are still rising these gaps and resentments don't boil over into conflict;\n- having the world's reserve currency inevitably leads to **borrowing excessively** ,**building up large debts** with foreign lenders while this boosts spending power over the short term. it weakens the country's financial health and **weakens** the currency over the long term.\n- In this cycle the richer countries eventually get deeper into debt by borrowing from poorer countries that save more it's one of the early signs of a wealth and powershift. this started in the united states in the 1980s when it had a per capita income 40 times that of china's and started borrowing from chinese who wanted to save in dollars\n###### 2.1 The decline\nthe decline comes from internal economic weakness together with internal fighting or costly external fighting or both:\n- when debts become very large and there is an economic downturn and the empire can no longer borrow the money necessary to repay its debts the **financial bubble** bursts\n- this forces the country to choose between defaulting on its debts or printing a lot of new money\n- that devalues the currency and raises inflation\n- when there are bad economic conditions and living standards for most people are declining and there are large wealth values and political gaps internal conflict between the rich and the poor.  this leads to political extremism that shows up as populism of the left or the right\n- when the move to a strong populous leader who will bring order to the chaos is most likely as conflict within the country escalates it leads to some form of revolution or civil war to redistribute wealth\n- this internal conflict makes the empire weak and vulnerable to rising external rivals who seeing this domestic weakness are more inclined to mount a challeng this raises the risk of great international conflict especially if the rival has built up a comparable military\n- wars are terribly costly at the same time they produce the tectonic shifts that realign the new waters to the new realities of wealth and power in the world\n\n","lastmodified":"2024-01-08T16:17:25.031362373Z","tags":["economics"]},"/notes/setup":{"title":"Setup","content":"\n## Making your own Quartz\nSetting up Quartz requires a basic understanding of `git`. If you are unfamiliar, [this resource](https://resources.nwplus.io/2-beginner/how-to-git-github.html) is a great place to start!\n\n### Forking\n\u003e A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.\n\nNavigate to the GitHub repository for the Quartz project:\n\nüìÅ [Quartz Repository](https://github.com/jackyzha0/quartz)\n\nThen, Fork the repository into your own GitHub account. **Make sure that when you fork, you _uncheck_ the 'Copy the `hugo` branch only' option**.\n\nIf you don't have an account, you can make on for free [here](https://github.com/join). More details about forking a repo can be found on [GitHub's documentation](https://docs.github.com/en/get-started/quickstart/fork-a-repo).\n\n![Fork](notes/images/fork.png)\n\n### Cloning\nAfter you've made a fork of the repository, you need to download the files locally onto your machine. Ensure you have `git`, then type the following command in your terminal replacing `YOUR-USERNAME` with your GitHub username.\n\n```shell\ngit clone https://github.com/YOUR-USERNAME/quartz\n```\n\n## Editing\nGreat! Now you have everything you need to start editing and growing your digital garden. If you're ready to start writing content already, check out the recommended flow for editing notes in Quartz.\n\n\u003e ‚úèÔ∏è Step 2: [Editing Notes in Quartz](notes/editing.md)\n","lastmodified":"2024-01-08T16:17:25.031362373Z","tags":["setup"]}}